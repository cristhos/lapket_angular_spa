{"version":3,"file":"/home/lithos/Data/Lab/codash/angularSpa/src/app/deal/service/deal.service.ts","sources":["/home/lithos/Data/Lab/codash/angularSpa/src/app/deal/service/deal.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable }    from '@angular/core';\nimport { Http, Headers, RequestOptions,Response } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { ApiUrlService } from '../../utils/api-url.service';\n\n@Injectable()\nexport class DealService {\n  baseUrl: string;\n  url: any;\n\n  constructor(private http: Http, private apiUrlService : ApiUrlService){\n    this.baseUrl = this.apiUrlService.getBaseUrl();\n    this.baseUrl = this.baseUrl + '/api/deal';\n  }\n\n  getMyDealConversations(page){\n    this.url = this.baseUrl +'/conversation/my/conversations.json?page='+page;\n    return this.http\n               .get(this.url)\n               .map(res => res.json())\n    ;\n  }\n\n  getDealConversation(conversation_id){\n    this.url = this.baseUrl +'/conversation/conversations/'+conversation_id+'.json';\n    return this.http\n               .get(this.url)\n               .map(res => res.json());\n  }\n\n  getMyDeals(){\n    return this.http\n               .get('')\n               .map(res => res.json())\n    ;\n  }\n\n  getDealMessages(conversation_id,page){\n    this.url = this.baseUrl +'/message/messages/'+conversation_id+'/conversation.json?page='+page;\n    return this.http\n               .get(this.url)\n               .map(res => res.json());\n  }\n\n  postDealMessage(conversation_id,message){\n    this.url = this.baseUrl + '/message/messages/'+conversation_id+'.json';\n    let body = JSON.stringify({conversation_id : conversation_id,content : message.content});\n    return this.http.post(this.url, body)\n                    .map(res => res.json());\n  }\n\n  postConversation(product_id : any){\n    this.url = this.baseUrl + '/conversation/conversations/'+product_id+'.json';\n    let body = JSON.stringify({product_id});\n    return this.http.post(this.url,body)\n                    .map(res => res.json());\n  }\n\n  deleteComment(deal_id){\n    return this.http\n               .get(``)\n               .map(res => res.json())\n    ;\n  }\n}\n"]}