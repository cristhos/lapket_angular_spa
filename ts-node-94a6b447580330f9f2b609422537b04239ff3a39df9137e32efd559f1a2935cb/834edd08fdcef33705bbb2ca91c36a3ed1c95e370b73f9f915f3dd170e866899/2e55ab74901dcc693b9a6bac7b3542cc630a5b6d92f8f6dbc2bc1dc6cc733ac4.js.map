{"version":3,"file":"/home/lithos/Data/Lab/codash/angularSpa/src/app/utils/image-resizer.service.ts","sources":["/home/lithos/Data/Lab/codash/angularSpa/src/app/utils/image-resizer.service.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA8C;AAG9C,IAAa,mBAAmB;IAAhC;IAgDA,CAAC;IA9CG,sCAAQ,GAAR,UAAS,IAAI,EAAE,MAAM,EAAE,QAAQ;QAC3B,MAAM,CAAC,MAAM,GAAG;YACd,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1B,CAAC,CAAA;QACD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,oCAAM,GAAN,UAAO,GAAG,EAAE,SAAsB,EAAE,UAAuB,EAAE,QAAQ;QAAzD,0BAAA,EAAA,eAAsB;QAAE,2BAAA,EAAA,gBAAuB;QAE3D,MAAM,CAAC,GAAG,CAAC,MAAM,GAAG;YAElB,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;YACtB,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;YAExB,+DAA+D;YAC/D,EAAE,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;gBACjB,EAAE,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC;oBACpB,MAAM,IAAI,SAAS,GAAG,KAAK,CAAC;oBAC5B,KAAK,GAAG,SAAS,CAAC;gBACtB,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC;oBACtB,KAAK,IAAI,UAAU,GAAG,MAAM,CAAC;oBAC7B,MAAM,GAAG,UAAU,CAAC;gBACxB,CAAC;YACL,CAAC;YAED,IAAI,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC9C,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;YACrB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;YACvB,IAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAElC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAG,KAAK,EAAE,MAAM,CAAC,CAAC;YACzC,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAEjD,QAAQ,CAAC,WAAW,CAAC,CAAC;QACxB,CAAC,CAAC;IACJ,CAAC;IACA,2CAAa,GAAb,UAAc,OAAO,EAAE,QAAQ;QAC9B,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAC3D,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,KAAK,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;QACpE,OAAM,CAAC,EAAE,EAAC,CAAC;YACP,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC;QACD,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,CAAC;IAClD,CAAC;IACH,0BAAC;AAAD,CAAC,AAhDD,IAgDC;AAhDY,mBAAmB;IAD/B,iBAAU,EAAE;GACA,mBAAmB,CAgD/B;AAhDY,kDAAmB","sourcesContent":["import { Injectable }    from '@angular/core';\n\n@Injectable()\nexport class ImageResizerService{\n\n    readFile(file, reader, callback){\n        reader.onload = () => {\n          callback(reader.result);\n        }\n        reader.readAsDataURL(file);\n    }\n\n    resize(img, MAX_WIDTH:number = 300, MAX_HEIGHT:number = 500, callback){\n\n    return img.onload = () => {\n\n      let width = img.width;\n      let height = img.height;\n\n      // Set the WxH to fit the Max values (but maintain proportions)\n      if (width > height) {\n          if (width > MAX_WIDTH) {\n              height *= MAX_WIDTH / width;\n              width = MAX_WIDTH;\n          }\n      } else {\n          if (height > MAX_HEIGHT) {\n              width *= MAX_HEIGHT / height;\n              height = MAX_HEIGHT;\n          }\n      }\n\n      let canvas = document.createElement(\"canvas\");\n      canvas.width = width;\n      canvas.height = height;\n      let ctx = canvas.getContext(\"2d\");\n\n      ctx.drawImage(img, 0, 0,  width, height);\n      let resized_img = canvas.toDataURL('image/jpeg');\n\n      callback(resized_img);\n    };\n  }\n   dataURLtoFile(dataurl, filename) {\n    var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n    while(n--){\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new File([u8arr], filename, {type:mime});\n  }\n}\n"]}