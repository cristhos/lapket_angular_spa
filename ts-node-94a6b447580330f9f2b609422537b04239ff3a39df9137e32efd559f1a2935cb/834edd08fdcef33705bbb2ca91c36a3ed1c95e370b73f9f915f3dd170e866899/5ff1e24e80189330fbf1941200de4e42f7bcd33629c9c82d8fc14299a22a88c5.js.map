{"version":3,"file":"/home/lithos/Data/Lab/codash/angularSpa/src/app/user/service/can-activate-via-auth-guard.ts","sources":["/home/lithos/Data/Lab/codash/angularSpa/src/app/user/service/can-activate-via-auth-guard.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,0CAKwB;AACxB,sCAA2C;AAC3C,+CAA6C;AAI7C,IAAa,uBAAuB;IAClC,iCAAoB,WAAwB,EAAU,MAAc;QAAhD,gBAAW,GAAX,WAAW,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAExE,8EAA8E;IAC9E,6CAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACjE,IAAI,GAAG,GAAW,KAAK,CAAC,GAAG,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IACD,6DAA6D;IAC7D,4CAAU,GAAV,UAAW,GAAW;QACrB,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAAC,CAAC;QAC1D,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,GAAG,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,KAAK,CAAC;IACX,CAAC;IACJ,kDAAgB,GAAhB;QACC,EAAE,CAAA,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAChD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IACA,yCAAO,GAAP,UAAQ,KAAY;QAClB,IAAI,GAAG,GAAG,MAAI,KAAK,CAAC,IAAM,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAClC,CAAC;IAGH,8BAAC;AAAD,CAAC,AAzBD,IAyBC;AAzBY,uBAAuB;IADnC,iBAAU,EAAE;qCAEsB,0BAAW,EAAkB,eAAM;GADzD,uBAAuB,CAyBnC;AAzBY,0DAAuB","sourcesContent":["import {\n  CanActivate, Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Route\n}from '@angular/router';\nimport\t{\tInjectable\t}\tfrom\t'@angular/core';\nimport\t{\tUserService\t}\tfrom\t'./user.service';\n\n\n@Injectable()\nexport\tclass\tCanActivateViaAuthGuard\timplements\tCanActivate{\n\t\tconstructor(private\tuserService:\tUserService, private router: Router)\t{}\n\n\t\t// La méthode du Guard : détermine si l'utilisateur peut se connecter ou non !\n\t\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n\t\t    let url: string = state.url;\n\t\t    return this.checkLogin(url);\n\t\t}\n\t\t// Méthode d'aide pour le Guard, qui interroge notre service.\n\t\tcheckLogin(url: string): boolean {\n\t\t\tif (localStorage.getItem(\"access_token\")) { return true; }\n\t\t\tthis.userService.redirectUrl = url;\n\t\t\tthis.router.navigate(['/login']);\n\t\t\treturn false;\n\t    }\n\t\tcheckAuthRequest(): boolean{\n\t\t\tif(localStorage.getItem(\"request\")) return true;\n\t\t\treturn false;\n\t\t}\n\t\t canLoad(route: Route): boolean {\n  \t\t\tlet url = `/${route.path}`;\n  \t\t\treturn this.checkAuthRequest();\n\t\t}\n\n\n}\n"]}